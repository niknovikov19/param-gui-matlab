function create_param_GUI(par_descs, outer_proc, npar_x, npar_y, dirpath_save, need_run, caption)
% Create window with GUI elements for controlling parameters passed to an outer function
% par_descs - cell array of parameters descriptors; par_descs{n} = {par_name, par_mult, par_val_0, par_val_inc}
% par_name - name of parameter
% par_mult - a multiplier applied to a value in edit box before sending it to outer_proc
% par_val_0 - initial value of a parameter
% par_inc - increment step of a parameter
% par_descs{n} can be empty; in this case there will be an empty place in the window
% outer_proc(params) - a function called each time when parameters are changed, takes 'params' structure generated by GUI as an argument 
% params = struct('par_name', 'par_val')
% dirpath_save - folder used to save / load data
% need_run - do we need to run the procedure after each param change
% caption - caption of the GUI

% h/w
aspect = 3/4;

% Visual parameters
edit_w = 120;
edit_h = 20;
text_h = edit_h * 0.8;
slider_w = edit_h - 1;
margin_inner = 5;
margin_outer = edit_h * 0.5;
par_UI_w = edit_w + margin_inner + slider_w;
par_UI_h = text_h + edit_h;
button_w = par_UI_w;
button_h = par_UI_h;

% Layout
npar = length(par_descs);
if ~exist('npar_x', 'var') || ~exist('npar_y', 'var')
	npar_x = ceil(sqrt(npar/aspect));
	npar_y = ceil(npar/npar_x);
end

if ~exist('dirpath_save', 'var')
	dirpath_save = 'E:\WORK\MODEL\results\GUI_PARAMS\default';
end
if ~exist(dirpath_save, 'dir')
	mkdir(dirpath_save);
end

if ~exist('need_run', 'var')
	need_run = 1;
end

if ~exist('caption', 'var')
	caption = [];
end

% Window size
win_w = margin_outer + max(2,npar_x) * (par_UI_w + margin_outer);
win_h = margin_outer + (npar_y + 2) * (par_UI_h + margin_outer);

% Screen size
scr_sz = get(groot, 'ScreenSize');
scr_w = scr_sz(3);
scr_h = scr_sz(4);

% Create window
if ~isempty(caption);
	figure('Position', [50, scr_h-win_h-100, win_w, win_h], 'Name', caption);
else
	figure('Position', [50, scr_h-win_h-100, win_w, win_h]);
end
set(gcf, 'NumberTitle', 'off');
win_id = randi(10^4);

par_x = 1;
par_y = npar_y + 1;

% Create GUI elements that correspond to parameters
for n = 1 : length(par_descs)
	
	par_desc = par_descs{n};
	
	if ~isempty(par_desc)

        % Position of the current group of GUI elements
        x = margin_outer + (par_x-1) * (par_UI_w + margin_outer);
        y = margin_outer + (par_y-1) * (par_UI_h + margin_outer);

        par_id = n;
        par_name = par_desc{1};

        % Create GUI elements
        uicontrol('Style', 'text', 'Tag', sprintf('text_%i_%i', win_id, par_id), 'Position', [x, y+text_h, edit_w, edit_h], 'String', par_name);
		if ~is_list_param(par_name)
			par_val_0 = par_desc{3};
			par_val_inc = par_desc{4};
			uicontrol('Style', 'edit', 'Tag', sprintf('edit_%i_%i', win_id, par_id), 'Position', [x, y, edit_w, edit_h], 'String', num2str(par_val_0),...
				'Callback', {@cb_edit, win_id, par_id, outer_proc, par_descs, need_run});
			uicontrol('Style', 'slider', 'Tag', sprintf('slider_%i_%i', win_id, par_id), 'Position', [x+edit_w+margin_inner, y, slider_w, edit_h],...
				'Value', 0, 'Max', par_val_inc, 'Min', -par_val_inc, 'SliderStep', [1,1],...
				'Callback', {@cb_slider, win_id, par_id, outer_proc, par_descs, need_run});
		else
			lst_items = par_desc{2};
			uicontrol('Style', 'popupmenu', 'Tag', sprintf('popup_%i_%i', win_id, par_id), 'Position', [x, y, edit_w+margin_inner+slider_w, edit_h], 'String', num2str(par_val_0),...
				'String', lst_items, 'Callback', {@cb_edit, win_id, par_id, outer_proc, par_descs, need_run});
		end
	
    end
    
	par_y = par_y - 1;
	if par_y == 1
		par_y = npar_y + 1;
		par_x = par_x + 1;
	end
	
end

% Create Save button
x = margin_outer;
y = margin_outer + (npar_y+1) * (par_UI_h + margin_outer);
uicontrol('Style', 'pushbutton', 'Tag', sprintf('save_%i', win_id), 'Position', [x, y, button_w, button_h], 'String', 'Save',...
	'Callback', {@cb_save, win_id, par_descs, dirpath_save, caption});

% Create Load button
x = margin_outer + (par_UI_w + margin_outer);
y = margin_outer + (npar_y+1) * (par_UI_h + margin_outer);
uicontrol('Style', 'pushbutton', 'Tag', sprintf('load_%i', win_id), 'Position', [x, y, button_w, button_h], 'String', 'Load',...
	'Callback', {@cb_load, win_id, outer_proc, par_descs, dirpath_save, need_run});

% Create Run button
x = margin_outer + 2 * (par_UI_w + margin_outer);
y = margin_outer + (npar_y+1) * (par_UI_h + margin_outer);
uicontrol('Style', 'pushbutton', 'Tag', sprintf('run_%i', win_id), 'Position', [x, y, button_w, button_h], 'String', 'Run',...
	'Callback', {@cb_run, win_id, outer_proc, par_descs, dirpath_save});

% Create text UI for displaying name of the parameter combination
x = margin_outer;
y = margin_outer;
uicontrol('Style', 'text', 'Tag', sprintf('text_PARCOMB_NAME_%i', win_id), 'Position', [x, y, 4*par_UI_w, edit_h], 'String', 'DefaultName', 'HorizontalAlignment', 'left');

% Collect params and call outer function for the first time
if need_run
	call_outer_proc(win_id, outer_proc, par_descs, 1);
end

end


% Edit callback
function cb_edit(hObject, callbackdata, win_id, par_id, outer_proc, par_descs, need_run)

	% Collect params and call outer function
	if need_run
		call_outer_proc(win_id, outer_proc, par_descs, 0);
	end

end

% Slider callback
function cb_slider(hObject, callbackdata, win_id, par_id, outer_proc, par_descs, need_run)

	% Get increment (+val_inc / -val_inc / 0)
	inc = get(hObject, 'Value');
	
	% Reset Slider 
	set(hObject, 'Value', 0);
	
	% Set updated value in the edit box
	hEdit = findobj('Tag', sprintf('edit_%i_%i', win_id, par_id));
	val = str2num(get(hEdit, 'String'));
	set(hEdit, 'String', num2str(val+inc));
	
	% Collect params and call outer function
	if need_run
		call_outer_proc(win_id, outer_proc, par_descs, 0);
	end

end

% Save callback
function cb_save(hObject, callbackdata, win_id, par_descs, dirpath_save, caption)

	% Collect params
	params = collect_param_vals(win_id, par_descs);
	
	% Get output path from a dialog
	if ~isempty(caption)
		fname_def = get_datetime_fname('.mat', ['_(', caption, ')']);
	else
		fname_def = get_datetime_fname('.mat');
	end
	fpath_def = fullfile(dirpath_save, fname_def);
	[fname, dirpath] = uiputfile('*.mat', 'Save', fpath_def);
	
	% Save
	if ~isempty(fname)
		try
			save(fullfile(dirpath,fname), 'params');
		catch
			return;
		end
	end
	
	% Set text_PARCOMB_NAME UI
	[~,fname_noext] = fileparts(fname);
	h = findobj('Tag', sprintf('text_PARCOMB_NAME_%i', win_id));
	set(h, 'String', fname_noext);	

end

% Load callback
function cb_load(hObject, callbackdata, win_id, outer_proc, par_descs, dirpath_load, need_run)

	% Get input path from a dialog
	[fname, dirpath] = uigetfile('*.mat', 'Load', dirpath_load);
	if isempty(fname)
		return;
	end
		
	try

		% Load
		Q = load(fullfile(dirpath,fname));
		params = Q.params;

		% Set params fields
		set_param_vals(win_id, par_descs, params);

	catch

		return;

	end
	
	% Set text_PARCOMB_NAME UI
	[~,fname_noext] = fileparts(fname);
	h = findobj('Tag', sprintf('text_PARCOMB_NAME_%i', win_id));
	set(h, 'String', fname_noext);

	% Collect params and call outer proc
	if need_run
		call_outer_proc(win_id, outer_proc, par_descs, 0);
	end

end

% Run callback
function cb_run(hObject, callbackdata, win_id, outer_proc, par_descs, dirpath_load)

	% Collect params and call outer proc
	call_outer_proc(win_id, outer_proc, par_descs, 0);

end

% Collect params and call outer proc
function call_outer_proc(win_id, outer_proc, par_descs, is_first_call)

	% Collect params
	params = collect_param_vals(win_id, par_descs);
	
	% Get name of the parameter combination
% 	h = findobj('Tag', sprintf('text_PARCOMB_NAME_%i', win_id));
% 	parcomb_name = get(h, 'String');

	% Call outer proc
	outer_proc(params);
% 	if nargin(outer_proc)==1
% 		outer_proc(params, 0);
% 	else
% 		outer_proc(params, 0, parcomb_name);
% 	end
	
end

% Get all param values and call outer function
function params = collect_param_vals(win_id, par_descs)

	params = struct('par_name', {}, 'par_val', {});
	
	for par_id = 1 : length(par_descs)
		
		if isempty(par_descs{par_id})
			continue;
		end
		
		% Get param name and multiplier
		par_name = par_descs{par_id}{1};
		par_mult = par_descs{par_id}{2};
		
		if ~is_list_param(par_name)
			
			% Get value from the edit box
			hEdit = findobj('Tag', sprintf('edit_%i_%i', win_id, par_id));
			val = str2num(get(hEdit, 'String'));
			
			% Value is not numeric - return user to the edit GUI element
			if isempty(val)
				uicontrol(hEdit);
				return;
			end
			
			params(end+1) = struct('par_name', par_name, 'par_val', val*par_mult);
			
		else
			
			% Get value from the popup list
			hPopup = findobj('Tag', sprintf('popup_%i_%i', win_id, par_id));
			lst = get(hPopup, 'String');
			id = get(hPopup, 'Value');
			val = lst{id};
			
			params(end+1) = struct('par_name', extract_popup_parname(par_name), 'par_val', val);
			
		end
		
	end

end

% Fill params fields
function set_param_vals(win_id, par_descs, params)

	for par_id = 1 : length(par_descs)
		
		if isempty(par_descs{par_id})
			continue;
		end
		
		% Get param name and multiplier
		par_name = par_descs{par_id}{1};
		
		if ~is_list_param(par_name)
		
			% Find parameter in the input by its name
			par_id_1 = find(strcmp(par_name, {params.par_name}));
			if isempty(par_id_1)
				continue;
			end
		
			% Multiplier
			par_mult = par_descs{par_id}{2};

			% Get value
			try
				val = params(par_id_1).par_val / par_mult;
			end

			% Set value to the edit box
			hEdit = findobj('Tag', sprintf('edit_%i_%i', win_id, par_id));
			set(hEdit, 'String', num2str(val));
			
		else
			
			try
				
				% Find parameter in the input by its name
				par_id_1 = find(strcmp(extract_popup_parname(par_name), {params.par_name}));
				if isempty(par_id_1)
					continue;
				end
				
				% Get value
				val = params(par_id_1).par_val;

				% Find uicontrol
				hPopup = findobj('Tag', sprintf('popup_%i_%i', win_id, par_id));
				
				% Search for the value among the list items
				lst = get(hPopup, 'String');
				id = find(strcmp(val, lst));
				assert(isempty(id)==0);
				
				% Set value to the popup list
				set(hPopup, 'Value', id);
				
			end
			
		end
		
	end

end

% Check if param name corresponds to the popup list parameter (LIST:par_name)
function b = is_list_param(par_name)
	b = 0;
	if length(par_name)>=5
		b = strcmp(par_name(1:5), 'LIST:');
	end
end

% Remove 'LIST:' prefix prom the par_name corresponding to a popup
function par_name = extract_popup_parname(par_name)
	assert(is_list_param(par_name)==1);
	par_name = par_name(6:end);
end


